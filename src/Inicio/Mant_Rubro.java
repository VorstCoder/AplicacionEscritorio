/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Inicio;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import servicios.Descuento;
import servicios.IOException_Exception;


/**
 *
 * @author Alex
 */
public class Mant_Rubro extends javax.swing.JFrame {

        /**
         * Creates new form Mant_Rubro
         */
        public Mant_Rubro() {
                initComponents();
        }

        /**
         * This method is called from within the constructor to initialize the form. WARNING: Do NOT
         * modify this code. The content of this method is always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                masterScrollPane = new javax.swing.JScrollPane();
                tablaRubro = new javax.swing.JTable();
                cbRubro = new javax.swing.JComboBox<>();
                btnListar = new javax.swing.JButton();
                btnVolver = new javax.swing.JButton();
                jLabel1 = new javax.swing.JLabel();
                nombreTxt = new javax.swing.JTextField();
                topeTxt = new javax.swing.JTextField();
                descuentoTxt = new javax.swing.JTextField();
                puntosTxt = new javax.swing.JTextField();
                jLabel2 = new javax.swing.JLabel();
                jLabel3 = new javax.swing.JLabel();
                jLabel4 = new javax.swing.JLabel();
                jLabel5 = new javax.swing.JLabel();
                btnLimpiar = new javax.swing.JButton();
                btnEditar = new javax.swing.JButton();
                btnAgregar = new javax.swing.JButton();
                btnEliminar = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                tablaRubro.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                                "idRubro", "nombreRubro", "tope", "porcentaje descuento", "puntos"
                        }
                ) {
                        Class[] types = new Class [] {
                                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
                        };

                        public Class getColumnClass(int columnIndex) {
                                return types [columnIndex];
                        }
                });
                masterScrollPane.setViewportView(tablaRubro);

                cbRubro.setEnabled(false);

                btnListar.setText("Listar");
                btnListar.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnListarActionPerformed(evt);
                        }
                });

                btnVolver.setText("Volver");
                btnVolver.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnVolverActionPerformed(evt);
                        }
                });

                jLabel1.setText("idRubro");

                nombreTxt.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                nombreTxtActionPerformed(evt);
                        }
                });
                nombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                                nombreTxtKeyTyped(evt);
                        }
                });

                topeTxt.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                topeTxtActionPerformed(evt);
                        }
                });
                topeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                                topeTxtKeyTyped(evt);
                        }
                });

                descuentoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                                descuentoTxtKeyTyped(evt);
                        }
                });

                puntosTxt.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                puntosTxtActionPerformed(evt);
                        }
                });
                puntosTxt.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                                puntosTxtKeyTyped(evt);
                        }
                });

                jLabel2.setText("Nombre Rubro");

                jLabel3.setText("Tope");

                jLabel4.setText("Descuento");

                jLabel5.setText("Puntos");

                btnLimpiar.setText("Limpiar");
                btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnLimpiarActionPerformed(evt);
                        }
                });

                btnEditar.setText("Editar");
                btnEditar.setEnabled(false);
                btnEditar.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnEditarActionPerformed(evt);
                        }
                });

                btnAgregar.setText("Agregar");
                btnAgregar.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAgregarActionPerformed(evt);
                        }
                });

                btnEliminar.setText("Eliminar");
                btnEliminar.setEnabled(false);
                btnEliminar.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnEliminarActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(masterScrollPane)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cbRubro, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(23, 23, 23)
                                                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel2)
                                                                        .addComponent(jLabel3)
                                                                        .addComponent(jLabel4)
                                                                        .addComponent(jLabel5))
                                                                .addGap(43, 43, 43)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(nombreTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                                                        .addComponent(topeTxt)
                                                                        .addComponent(descuentoTxt)
                                                                        .addComponent(puntosTxt)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(cbRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel1)
                                                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel2))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(topeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel3))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(descuentoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(puntosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
                Menu_Administrador frameAdm = new Menu_Administrador();
                frameAdm.setVisible(true);
                dispose();
        }//GEN-LAST:event_btnVolverActionPerformed

        private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
               
                
                 cbRubro.removeAllItems();
       DefaultTableModel tb = (DefaultTableModel) tablaRubro.getModel();
        int b = tablaRubro.getRowCount()-1;
        for (int i = b; i >= 0; i--) {           
        tb.removeRow(tb.getRowCount()-1);
                
        }
        
        nombreTxt.setText("");
        topeTxt.setText("");
        descuentoTxt.setText("");
        puntosTxt.setText("");
        cbRubro.setEnabled(false);      
        btnEditar.setEnabled(false);
        btnEliminar.setEnabled(false);
        }//GEN-LAST:event_btnLimpiarActionPerformed

        private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed


try{

            ArrayList<Descuento> rubros = (ArrayList<Descuento>) traerRubro();
            DefaultTableModel modelo = (DefaultTableModel)tablaRubro.getModel();
            
      
            int i = 0;
            for (Descuento rubro : rubros) {
               
                   
                cbRubro.addItem(Integer.toString(rubro.getIdRubro()));
                
                i++;
            }
      
            
           Object[] fila = new Object[modelo.getColumnCount()];
           
            for (Descuento rubro : rubros) {
                   // contadorIdTienda = tienda.getIdtienda();
                fila[0] =  rubro.getIdRubro();
                fila[1] = rubro.getNombreRubro();
                fila[2] = rubro.getTope();
                fila[3] = rubro.getDescuento();
                fila[4] = rubro.getPuntos();
                modelo.addRow(fila);
            }         
            
            
            
                
                if(modelo.getRowCount() > 0){
                
                        cbRubro.setEnabled(true);
                        btnEditar.setEnabled(true);
                        btnEliminar.setEnabled(true);
                }
                

   } catch (IOException_Exception ex) {
            Logger.getLogger(Mant_Rubro.class.getName()).log(Level.SEVERE, null, ex);
        }
        
                
                
            
        }//GEN-LAST:event_btnListarActionPerformed

        private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
               
                
                
                   if(nombreTxt.getText().length() == 0 ){
                        JOptionPane.showMessageDialog(null, "Atención: El campo nombre rubro esta vacio,completelo","Mensaje",JOptionPane.INFORMATION_MESSAGE);                   
                 }
                  
                  else if (nombreTxt.getText().length() < 4){
                  
                    JOptionPane.showMessageDialog(null, "Atención: El campo nombre rubro es demasiado corto","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                  }
                  
                 else if (topeTxt.getText().length() == 0){
                  
                    JOptionPane.showMessageDialog(null, "Atención: El campo tope esta vacio,completelo","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                  }
                 
               else if(topeTxt.getText().length() < 4 ){
                
                     JOptionPane.showMessageDialog(null, "Atención: El campo tope es demasiado corto","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                }
               
                else if (descuentoTxt.getText().length() == 0){
                  
                    JOptionPane.showMessageDialog(null, "Atención: El campo descuento esta vacio,completelo","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                  }
               
                  
                   else if(puntosTxt.getText().length() == 0 ){
                
                     JOptionPane.showMessageDialog(null, "Atención: El campo puntos esta vacio,completelo","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                }
                  
                  else if(puntosTxt.getText().length() < 3 ){
                
                     JOptionPane.showMessageDialog(null, "Atención: El campo puntos es demasiado corto","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                }
                  else{
                  
                  
                 
                        int idrub = selectMaxIdRubro();
                        String nombre = nombreTxt.getText();
                        String top = topeTxt.getText();
                        String desc = descuentoTxt.getText();
                        String ptos = puntosTxt.getText();
                        int tope = Integer.parseInt(top);
                        int descuento = Integer.parseInt(desc);
                        int puntos = Integer.parseInt(ptos);
                          
                          
                                 boolean respuesta = registrarRubro(idrub,nombre,tope,descuento,puntos);
                                 
                                 
                                 if(respuesta == true){ // se agrego correctamente
                                 
                                         JOptionPane.showMessageDialog(null, "Se ha registrar correctamente el rubro","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                                         
                                         btnLimpiarActionPerformed(evt);
                                          btnListarActionPerformed(evt);
                                 }
                                 else{ // no se pudo agregar correctamente
                                 
                                          JOptionPane.showMessageDialog(null, "No se ha podido registrar el rubro, intentelo denuevo","Mensaje",JOptionPane.ERROR_MESSAGE);
                                 }
                  
                  
                  }
                
                
        
        
        }//GEN-LAST:event_btnAgregarActionPerformed

        private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
               
               
                
                
                  if(nombreTxt.getText().length() == 0 ){
                        JOptionPane.showMessageDialog(null, "Atención: El campo nombre rubro esta vacio,completelo","Mensaje",JOptionPane.INFORMATION_MESSAGE);                   
                 }
                  
                  else if (nombreTxt.getText().length() < 4){
                  
                    JOptionPane.showMessageDialog(null, "Atención: El campo nombre rubro es demasiado corto","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                  }
                  
                 else if (topeTxt.getText().length() == 0){
                  
                    JOptionPane.showMessageDialog(null, "Atención: El campo tope esta vacio,completelo","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                  }
                 
               else if(topeTxt.getText().length() < 4 ){
                
                     JOptionPane.showMessageDialog(null, "Atención: El campo tope es demasiado corto","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                }
               
                else if (descuentoTxt.getText().length() == 0){
                  
                    JOptionPane.showMessageDialog(null, "Atención: El campo descuento esta vacio,completelo","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                  }
               
                  
                   else if(puntosTxt.getText().length() == 0 ){
                
                     JOptionPane.showMessageDialog(null, "Atención: El campo puntos esta vacio,completelo","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                }
                  
                  else if(puntosTxt.getText().length() < 3 ){
                
                     JOptionPane.showMessageDialog(null, "Atención: El campo puntos es demasiado corto","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                }
                  else{ // se va a editar el rubro
                  
                        String idrubro = cbRubro.getSelectedItem().toString();
                        int idrub = Integer.parseInt(idrubro);
                        String nombre = nombreTxt.getText();
                        String top = topeTxt.getText();
                        String desc = descuentoTxt.getText();
                        String ptos = puntosTxt.getText();
                        int tope = Integer.parseInt(top);
                        int descuento = Integer.parseInt(desc);
                        int puntos = Integer.parseInt(ptos);
                          
                          
                                 boolean respuesta = actualizarRubroxId(idrub,nombre,tope,descuento,puntos);
                  
                                 if(respuesta == true){ // se edito correctamente
                                 
                                         JOptionPane.showMessageDialog(null, "Se ha editado correctamente el rubro","Mensaje",JOptionPane.INFORMATION_MESSAGE);
                                         btnLimpiarActionPerformed(evt);
                                          btnListarActionPerformed(evt);
                                 }
                                 else{ // no se pudo editar correctamente
                                 
                                          JOptionPane.showMessageDialog(null, "No se ha podido editar el rubro, intentelo denuevo","Mensaje",JOptionPane.ERROR_MESSAGE);
                                 }
                                 
                                 
                  
                  }
                
                
        }//GEN-LAST:event_btnEditarActionPerformed

        private void nombreTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreTxtActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_nombreTxtActionPerformed

        private void nombreTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTxtKeyTyped
         
                // se impide que se ingresen numero al campo
                 char cadena= evt.getKeyChar();        
          if(Character.isDigit(cadena)) { 
              getToolkit().beep(); 
               
              evt.consume(); 
                
          } 
              
        
           // se impide que se agregan mas de x cantidad de caracteres
       if(nombreTxt.getText().length()> 40) {  
          evt.consume();
       }
          

        }//GEN-LAST:event_nombreTxtKeyTyped

        private void topeTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_topeTxtKeyTyped
           
                // se impide que se ingresen letras al campo de texto
                       char cadena = evt.getKeyChar();
       if (!(Character.isDigit(cadena) ||
                (cadena == KeyEvent.VK_BACK_SPACE) ||
                (cadena == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                evt.consume();

       }
       
       
       
       // se impide que se agregan mas de x cantidad de caracteres
       if(topeTxt.getText().length()>8) {  
          evt.consume();
 }
                
                
        }//GEN-LAST:event_topeTxtKeyTyped

        private void descuentoTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descuentoTxtKeyTyped
               
                
                    // se impide que se ingresen letras al campo de texto
                       char cadena = evt.getKeyChar();
       if (!(Character.isDigit(cadena) ||
                (cadena == KeyEvent.VK_BACK_SPACE) ||
                (cadena == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                evt.consume();

       }
                
       
       
           // se impide que se agregan mas de x cantidad de caracteres
       if(descuentoTxt.getText().length()>=3) {  
          evt.consume();
 }
       
                
        }//GEN-LAST:event_descuentoTxtKeyTyped

        private void puntosTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_puntosTxtKeyTyped
              
                
                    // se impide que se ingresen letras al campo de texto
                       char cadena = evt.getKeyChar();
       if (!(Character.isDigit(cadena) ||
                (cadena == KeyEvent.VK_BACK_SPACE) ||
                (cadena == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                evt.consume();

       }
                
       
           // se impide que se agregan mas de x cantidad de caracteres
       if(puntosTxt.getText().length()>4) {  
          evt.consume();
 }
                
        }//GEN-LAST:event_puntosTxtKeyTyped

        private void puntosTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puntosTxtActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_puntosTxtActionPerformed

        private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
               
                int accionEliminar = 0;
                String idrubro = cbRubro.getSelectedItem().toString();
                        int idrub = Integer.parseInt(idrubro);
                               
                accionEliminar = JOptionPane.showConfirmDialog(null,"¿Esta seguro que quiere eliminar este rubro? \nAl hacerlo podrian eliminarse registros de los descuentos realizados.","Mensaje",JOptionPane.OK_CANCEL_OPTION);
          if(accionEliminar < 0){ JOptionPane.showMessageDialog(null,"No se ha eliminado el rubro");}
          else if(accionEliminar == JOptionPane.CANCEL_OPTION){ JOptionPane.showMessageDialog(null,"No se ha eliminado el rubro");}
          else if(accionEliminar == JOptionPane.OK_OPTION){// se da ok en el mensaje emergente
                  
                                   boolean respuesta = eliminarRubroxId(idrub);
                  if(respuesta == true){ // se elimino correctamente el rubro
                    JOptionPane.showMessageDialog(null,"Rubro eliminado");
                    btnLimpiarActionPerformed(evt);
                    btnListarActionPerformed(evt);
                  }
                  else{ // no se pudo eliminar el rubro 
                  JOptionPane.showMessageDialog(null, "Ha ocurrido un error inesperado,intentelo denuevo o contacte con el administrador","Mensaje",JOptionPane.ERROR_MESSAGE);
                  }
        
          }
                        
                        
                        
                        
             
                
                
               
                
                
        }//GEN-LAST:event_btnEliminarActionPerformed

        private void topeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topeTxtActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_topeTxtActionPerformed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                if ("Nimbus".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(Mant_Rubro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(Mant_Rubro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(Mant_Rubro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(Mant_Rubro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                //</editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                new Mant_Rubro().setVisible(true);
                        }
                });
        }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnAgregar;
        private javax.swing.JButton btnEditar;
        private javax.swing.JButton btnEliminar;
        private javax.swing.JButton btnLimpiar;
        private javax.swing.JButton btnListar;
        private javax.swing.JButton btnVolver;
        private javax.swing.JComboBox<String> cbRubro;
        private javax.swing.JTextField descuentoTxt;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel4;
        private javax.swing.JLabel jLabel5;
        private javax.swing.JScrollPane masterScrollPane;
        private javax.swing.JTextField nombreTxt;
        private javax.swing.JTextField puntosTxt;
        private javax.swing.JTable tablaRubro;
        private javax.swing.JTextField topeTxt;
        // End of variables declaration//GEN-END:variables

        private static java.util.List<servicios.Descuento> traerRubro() throws IOException_Exception {
                servicios.WebService_Service service = new servicios.WebService_Service();
                servicios.WebService port = service.getWebServicePort();
                return port.traerRubro();
        }

        private static boolean actualizarRubroxId(int idRubro, java.lang.String nombreRubro, int tope, int descuento, int puntos) {
                servicios.WebService_Service service = new servicios.WebService_Service();
                servicios.WebService port = service.getWebServicePort();
                return port.actualizarRubroxId(idRubro, nombreRubro, tope, descuento, puntos);
        }

        private static boolean registrarRubro(int idRubro, java.lang.String nombreRubro, int tope, int descuento, int puntos) {
                servicios.WebService_Service service = new servicios.WebService_Service();
                servicios.WebService port = service.getWebServicePort();
                return port.registrarRubro(idRubro, nombreRubro, tope, descuento, puntos);
        }

        private static boolean eliminarRubroxId(int idRubro) {
                servicios.WebService_Service service = new servicios.WebService_Service();
                servicios.WebService port = service.getWebServicePort();
                return port.eliminarRubroxId(idRubro);
        }

        private static int selectMaxIdRubro() {
                servicios.WebService_Service service = new servicios.WebService_Service();
                servicios.WebService port = service.getWebServicePort();
                return port.selectMaxIdRubro();
        }
}
